  "webApiPermissionRequests": [
  {
    "resource": "Microsoft Graph",
    "scope": "GroupMember.Read.All"
  }
],

import * as React from "react";
import { useEffect, useState } from "react";

import { WebPartContext } from "@microsoft/sp-webpart-base";

interface IGroupMembershipCheckerProps {
  context: WebPartContext;
  groupId: string; // Azure Entra ID group to check against
}

const GroupMembershipChecker: React.FC<IGroupMembershipCheckerProps> = ({
  context,
  groupId,
}) => {
  const [isMember, setIsMember] = useState<boolean | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const checkGroupMembership = async () => {
      try {
        const client = await context.msGraphClientFactory.getClient("3");

        // Step 1: Get current user's ID
        //const me = await client.api("/me").get();
        //const userId = me.id;

        // Step 2: Check if user is a transitive member of the group
        const response = await client
          .api(`/groups/${groupId}/transitiveMembers`)

          .get();

        const member: boolean = response.value && response.value.length > 0;
        console.log(member);

        /*?$filter=id eq '${userId}'*/

        setIsMember(response.value && response.value.length > 0);
      } catch (err: any) {
        console.error("Graph API error:", err);
        setError("Error checking transitive group membership.");
      } finally {
      }
    };

    checkGroupMembership();
  }, [context, groupId]);

  useEffect(() => {
    const checkUserGroupMembership = async () => {
      try {
        const client = await context.msGraphClientFactory.getClient("3");
        const response = await client
          .api(`/me/transitiveMemberOf/microsoft.graph.group`)
          .get();

        const groupIds = response.value.map((g: any) => g.id);

        if (groupIds.includes(groupId)) {
          setIsMember(true);
        } else {
          setIsMember(true);
        }
      } catch (err) {
        console.error("Graph API error:", err);
        setError("Error checking transitive group membership.");
      }
    };

    checkUserGroupMembership();
  }, [context, groupId]);

  if (error) {
    return <div style={{ color: "red" }}>{error}</div>;
  }

  if (isMember === null) {
    return <div>Checking transitive group membership...</div>;
  }

  return (
    <div>
      {isMember ? (
        <span style={{ color: "green" }}>
          ✅ You ARE a (transitive) member of the group.
        </span>
      ) : (
        <span style={{ color: "orange" }}>
          ⚠️ You are NOT a member of the group.
        </span>
      )}
    </div>
  );
};

export default GroupMembershipChecker;
